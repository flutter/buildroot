# Copyright 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/sysroot.gni")  # Imports android/config.gni.
import("//build/toolchain/ccache.gni")
import("//build/toolchain/clang.gni")
import("//build/toolchain/gcc_toolchain.gni")
import("//build/toolchain/goma.gni")
import("//build/toolchain/rbe.gni")

# The Android GCC toolchains share most of the same parameters, so we have this
# wrapper around gcc_toolchain to avoid duplication of logic.
#
# Parameters:
#  - android_ndk_lib_dir
#      Libraries for this architecture
#  - tool_prefix
#      Prefix to be added to the tool names.
#  - toolchain_cpu
#      Same as gcc_toolchain
template("android_gcc_toolchain") {
  gcc_toolchain(target_name) {
    extra_toolchain_args = {
      if (defined(invoker.extra_toolchain_args)) {
        forward_variables_from(invoker.extra_toolchain_args, "*")
      }
    }

    if (android_ndk_version <= 22) {
      # Make our manually injected libs relative to the build dir.
      android_ndk_lib = rebase_path(invoker.android_ndk_lib_dir, root_build_dir)
      libs_section_prefix = "$android_ndk_lib/crtbegin_dynamic.o"
      libs_section_postfix = "$android_ndk_lib/crtend_android.o"
      solink_libs_section_prefix = "$android_ndk_lib/crtbegin_so.o"
      solink_libs_section_postfix = "$android_ndk_lib/crtend_so.o"
    } else {
      not_needed(invoker, ["android_ndk_lib_dir"])
    }

    # The tools should be run relative to the build dir.
    tool_prefix = rebase_path(invoker.tool_prefix, root_build_dir)

    if (use_goma) {
      assert(!use_ccache, "Goma and ccache can't be used together.")
      compiler_prefix = "$goma_dir/gomacc "
      link_prefix = "$goma_dir/gomacc "
    } else if (use_rbe) {
      assert(!use_goma)
      rewrapper_args = [
        "$rbe_dir/rewrapper",
        "--server_address=$rbe_server_address",
        "--exec_strategy=$rbe_exec_strategy",
        "--dial_timeout=$rbe_dial_timeout",
        "--exec_root=$rbe_exec_root",
        "--platform=$rbe_platform",
      ]
      compiler_args =
          rewrapper_args + [ "--labels=type=compile,compiler=clang,lang=cpp " ]
      link_args = rewrapper_args + [ "--labels=type=link,tool=clang " ]
      compiler_prefix = string_join(" ", compiler_args)
      link_prefix = string_join(" ", link_args)
    } else if (use_ccache) {
      compiler_prefix = "ccache "
      link_prefix = "ccache "
    } else {
      compiler_prefix = ""
      link_prefix = ""
    }

    is_clang = invoker.is_clang
    if (is_clang) {
      host_dir = ""
      if (host_os == "linux") {
        host_dir = "linux-x64"
      } else if (host_os == "mac") {
        host_dir = "mac-x64"
      } else {
        assert(false, "Unknown host")
      }

      if (android_ndk_version > 22) {
        # When building with a newer NDK, use the toolchain bundled with the
        # NDK.
        prefix = rebase_path("$llvm_android_toolchain_root/bin", root_build_dir)
      } else {
        # When building with an older NDK, use our toolchain.
        prefix = rebase_path("//buildtools/$host_dir/clang/bin", root_build_dir)
      }
      asm = prefix + "/clang"
      cc = compiler_prefix + prefix + "/clang"
      cxx = compiler_prefix + prefix + "/clang++"
      ar = prefix + "/llvm-ar"
      ld = link_prefix + prefix + "/clang++"
      readelf = tool_prefix + "/llvm-readelf"
      nm = tool_prefix + "/llvm-nm"
      strip = prefix + "/llvm-strip"
    } else {
      asm = tool_prefix + "gcc"
      cc = compiler_prefix + tool_prefix + "gcc"
      cxx = compiler_prefix + tool_prefix + "g++"
      ar = tool_prefix + "ar"
      ld = link_prefix + tool_prefix + "g++"
      readelf = tool_prefix + "/llvm-readelf"
      nm = tool_prefix + "/llvm-nm"
      strip = tool_prefix + "strip"
    }

    toolchain_os = "android"
    toolchain_cpu = invoker.toolchain_cpu

    # We make the assumption that the gcc_toolchain will produce a soname with
    # the following definition.
    soname = "{{target_output_name}}{{output_extension}}"

    stripped_soname = "lib.stripped/${soname}"
    temp_stripped_soname = "${stripped_soname}.tmp"

    strip_command = "$strip --strip-unneeded -o $temp_stripped_soname {{root_out_dir}}/$soname"
    replace_command = "if ! cmp -s $temp_stripped_soname $stripped_soname; then mv $temp_stripped_soname $stripped_soname; fi"
    postsolink = "$strip_command && $replace_command"
    solink_outputs = [ stripped_soname ]
    default_output_extension = android_product_extension

    # We make the assumption that the gcc_toolchain will produce an exe with
    # the following definition.
    exe = "{{root_out_dir}}/{{target_output_name}}{{output_extension}}"
    stripped_exe = "exe.stripped/$exe"
    postlink = "$strip --strip-unneeded -o $stripped_exe $exe"
    link_outputs = [ stripped_exe ]
  }
}

template("android_gcc_toolchains_helper") {
  android_gcc_toolchain(target_name) {
    extra_toolchain_args = {
      if (defined(invoker.extra_toolchain_args)) {
        forward_variables_from(invoker.extra_toolchain_args, "*")
      }
    }
    android_ndk_lib_dir = invoker.android_ndk_lib_dir
    tool_prefix = invoker.tool_prefix
    toolchain_cpu = invoker.toolchain_cpu
  }
  android_gcc_toolchain("clang_$target_name") {
    extra_toolchain_args = {
      if (defined(invoker.extra_toolchain_args)) {
        forward_variables_from(invoker.extra_toolchain_args, "*")
      }
    }
    android_ndk_lib_dir = invoker.android_ndk_lib_dir
    tool_prefix = invoker.tool_prefix
    toolchain_cpu = invoker.toolchain_cpu
    is_clang = true
  }
}

android_gcc_toolchains_helper("x86") {
  android_ndk_lib_dir = android_lib

  tool_prefix = "$llvm_android_toolchain_root/bin/i686-linux-android-"
  toolchain_cpu = "x86"
}

android_gcc_toolchains_helper("arm") {
  android_ndk_lib_dir = android_lib

  tool_prefix = "$llvm_android_toolchain_root/bin/arm-linux-androideabi-"
  toolchain_cpu = "arm"
}

android_gcc_toolchains_helper("x64") {
  android_ndk_lib_dir = android_lib

  tool_prefix = "$llvm_android_toolchain_root/bin/x86_64-linux-android-"
  toolchain_cpu = "x86_64"
}

android_gcc_toolchains_helper("arm64") {
  android_ndk_lib_dir = android_lib

  tool_prefix = "$llvm_android_toolchain_root/bin/aarch64-linux-android-"
  toolchain_cpu = "aarch64"
}

# This toolchain should only be used to build the target
# //third_party/vulkan_validation_layers. This is because vulkan validation
# layers requires API level >= 26, but Flutter officially supports down to API
# level 22, which is the default value of the android_api_level argument.
android_gcc_toolchains_helper("arm64_apilevel26") {
  android_ndk_lib_dir = android_lib

  tool_prefix = "$llvm_android_toolchain_root/bin/aarch64-linux-android-"
  toolchain_cpu = "arm64"
  extra_toolchain_args = {
    android_api_level = 26
  }
}

android_gcc_toolchains_helper("riscv64") {
  android_ndk_lib_dir = android_lib

  tool_prefix = "$llvm_android_toolchain_root/bin"
  toolchain_cpu = "riscv64"
}
